     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fscanf, printf, fopen, fclose
     8                                  import fscanf msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ;6.	Se citesc din fisierul numere.txt mai multe numere (pare si impare). Sa se creeze 2 siruri rezultat N si P astfel: N - doar numere impare si P - doar numere pare. Afisati cele 2 siruri rezultate pe ecran.       
    16                                                            
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 6E756D6572652E7478-         file db "numere.txt", 0
    20 00000009 7400               
    21 0000000B 7200                        access_r db "r", 0
    22 0000000D 25640A00                    format_rw db "%d", 10, 0
    23 00000011 00000000<rept>              pare times 100 dd 0
    24 000001A1 00000000<rept>              impare times 100 dd 0
    25 00000331 00000000                    descriptor dd 0
    26 00000335 00000000                    n dd 0
    27 00000339 00000000                    cnt1 dd 0
    28 0000033D 00000000                    cnt2 dd 0
    29                                      
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34                                          
    35                                          ;open the input file
    36 00000000 68[0B000000]                    push dword access_r
    37 00000005 68[00000000]                    push dword file
    38 0000000A FF15[00000000]                  call [fopen]
    39 00000010 83C408                          add esp, 4 * 2
    40                                          
    41 00000013 A3[31030000]                    mov dword[descriptor], eax
    42                                          
    43 00000018 BE[11000000]                    mov esi, pare
    44 0000001D BF[A1010000]                    mov edi, impare
    45                                          
    46                                          repeat:
    47                                              ;read the numbers
    48 00000022 68[35030000]                        push dword n
    49 00000027 68[0D000000]                        push dword format_rw
    50 0000002C FF35[31030000]                      push dword[descriptor]
    51 00000032 FF15[00000000]                      call [fscanf]
    52 00000038 83C40C                              add esp, 4 * 3
    53                                              
    54 0000003B 83F8FF                              cmp eax, -1  ;the function returns -1 if it doesn't have something remained to read from the file
    55 0000003E 7444                                je out_read
    56                                              
    57                                              ;check parity of the numbers
    58 00000040 A1[35030000]                        mov eax, dword[n]
    59                                              parity:
    60 00000045 66BB0200                                mov bx, 2
    61 00000049 BA00000000                              mov edx, 0 
    62                                                  ;ax/dx: ax = quotient, dx = remainder
    63                                                  
    64 0000004E 66F7F3                                  div bx
    65                                                  
    66                                                  ;if dx = 0 => even number
    67 00000051 83FA00                                  cmp edx, 0
    68 00000054 7402                                    je even_numbers
    69 00000056 EB16                                    jmp odd_numbers
    70                                              
    71                                              even_numbers:
    72 00000058 8B0D[39030000]                          mov ecx, dword[cnt1]
    73 0000005E A1[35030000]                            mov eax, dword[n]
    74 00000063 89048E                                  mov [esi+ecx*4], eax
    75 00000066 FE05[39030000]                          inc byte[cnt1]
    76 0000006C EBB4                                    jmp repeat
    77                                                  
    78                                              odd_numbers:
    79 0000006E 8B0D[3D030000]                          mov ecx, dword[cnt2]
    80 00000074 A1[35030000]                            mov eax, dword[n]
    81 00000079 89048F                                  mov [edi+ecx*4], eax
    82 0000007C FE05[3D030000]                          inc byte[cnt2]
    83 00000082 EB9E                                    jmp repeat
    84                                                  
    85                                          out_read:
    86                                              ;we need to close the file
    87 00000084 FF35[31030000]                      push dword [descriptor]
    88 0000008A FF15[00000000]                      call [fclose]
    89 00000090 83C404                              add esp, 4
    90                                          
    91                                              ;we mush check the last number read
    92 00000093 A1[35030000]                        mov eax, dword[n]
    93                                              
    94                                              parity2:
    95 00000098 66BB0200                                mov bx, 2
    96 0000009C BA00000000                              mov edx, 0
    97                                                  
    98 000000A1 66F7F3                                  div bx
    99                                                  
   100 000000A4 83FA00                                  cmp edx, 0
   101 000000A7 7402                                    je even_numbers2
   102 000000A9 EB0E                                    jmp odd_numbers2
   103                                              
   104                                              even_numbers2:
   105 000000AB 8B0D[39030000]                          mov ecx, dword[cnt1]
   106 000000B1 A1[35030000]                            mov eax, dword[n]
   107 000000B6 89048E                                  mov [esi+ecx*4], eax
   108                                                  
   109                                              odd_numbers2:
   110 000000B9 8B0D[3D030000]                          mov ecx, dword[cnt2]
   111 000000BF A1[35030000]                            mov eax, dword[n]
   112 000000C4 89048F                                  mov [edi+ecx*4], eax
   113                                           
   114                                                  
   115                                          printeaza_pare:
   116                                  
   117 000000C7 BE[11000000]                        mov esi, pare
   118 000000CC 8B0D[39030000]                      mov ecx, dword [cnt1]
   119 000000D2 E314                                jecxz .pare_end_loop
   120                                              .pare_loop:
   121 000000D4 AD                                      lodsd
   122                                  
   123 000000D5 60                                      pusha
   124                                                  ; printf("d", eax)
   125 000000D6 50                                      push eax
   126 000000D7 68[0D000000]                            push dword format_rw
   127 000000DC FF15[00000000]                          call [printf]
   128 000000E2 83C408                                  add esp, 4 * 2
   129                                  
   130 000000E5 61                                      popa
   131                                  
   132 000000E6 E2EC                                    loop .pare_loop
   133                                  
   134                                  
   135                                              .pare_end_loop:
   136                                          
   137                                           printeaza_impare:
   138                                              ; printf(pare_text)
   139                                  
   140 000000E8 BE[A1010000]                        mov esi, impare
   141 000000ED 8B0D[3D030000]                      mov ecx, dword [cnt2]
   142 000000F3 E314                                jecxz .impare_end_loop
   143                                              .impare_loop:
   144 000000F5 AD                                      lodsd
   145                                  
   146 000000F6 60                                      pusha
   147                                                  ; printf("d", eax)
   148 000000F7 50                                      push eax
   149 000000F8 68[0D000000]                            push dword format_rw
   150 000000FD FF15[00000000]                          call [printf]
   151 00000103 83C408                                  add esp, 4 * 2
   152 00000106 61                                      popa
   153                                  
   154 00000107 E2EC                                    loop .impare_loop
   155                                  
   156                                  
   157                                              .impare_end_loop:
   158                                  
   159                                              
   160                                          ; exit(0)
   161 00000109 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   162 0000010B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
