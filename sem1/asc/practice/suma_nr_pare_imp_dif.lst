     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fopen, fclose, fprintf, printf, perror              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  import perror msvcrt.dll
    16                                  
    17                                                            
    18                                      ;2.	Se citește de la tastatură un număr N și apoi N numere.
    19                                      ;Să se calculeze suma numerelor pare introduse, să se calculeze suma numerelor impare introduse, apoi diferența dintre cele două sume.
    20                                      ;Să se afișeze în fișierul output.txt cele 3 rezultate, în baza 16, pe linii separate.
    21                                                        
    22                                                            
    23                                                            
    24                                  ; our data is declared here (the variables needed by our program)
    25                                  segment data use32 class=data
    26                                      ; ...
    27                                      
    28 00000000 00000000                    n dd 0
    29 00000004 00000000                    sum_pare dd 0
    30 00000008 00000000                    sum_imp dd 0
    31 0000000C 00000000                    dif_sume dd 0
    32 00000010 00000000                    numar dd 0
    33 00000014 <res 00000004>              file_ptr resd 1
    34 00000018 7200                        access_r db "r", 0
    35 0000001A 7700                        access_w db "w", 0
    36 0000001C 256400                      format_r db "%d", 0
    37 0000001F 257800                      format_w db "%x", 0
    38 00000022 6E3D00                      message db "n=", 0
    39 00000025 73756D206F66206576-         message1 db "sum of even numbers:", 0
    39 0000002E 656E206E756D626572-
    39 00000037 733A00             
    40 0000003A 73756D206F66206F64-         message2 db "sum of odd numbers:", 0
    40 00000043 64206E756D62657273-
    40 0000004C 3A00               
    41 0000004E 646966666572656E63-         message3 db "difference:", 0
    41 00000057 653A00             
    42 0000005A 0A00                        newline db 10, 0
    43 0000005C 6F75747075742E7478-         file db "output.txt", 0
    43 00000065 7400               
    44 00000067 00000000                    cpy dd 0
    45 0000006B 4572726F7220666F75-         errors db "Error found:", 0
    45 00000074 6E643A00           
    46                                  
    47                                  ; our code starts here
    48                                  segment code use32 class=code
    49                                      start:
    50                                          ; ...
    51 00000000 68[22000000]                    push dword message
    52 00000005 FF15[00000000]                  call [printf]
    53 0000000B 83C404                          add esp, 4
    54                                          
    55                                          ;read number n
    56 0000000E 68[00000000]                    push dword n
    57 00000013 68[1C000000]                    push dword format_r
    58 00000018 FF15[00000000]                  call [scanf]
    59 0000001E 83C408                          add esp, 4 * 2
    60                                          
    61 00000021 8B0D[00000000]                  mov ecx, dword[n]
    62                                          ;while ecx > 0
    63                                          
    64                                          while_loop:
    65 00000027 890D[67000000]                      mov dword[cpy], ecx
    66                                              
    67                                              ;read the number
    68 0000002D 68[10000000]                        push dword numar
    69 00000032 68[1C000000]                        push dword format_r
    70 00000037 FF15[00000000]                      call [scanf]
    71 0000003D 83C408                              add esp, 4*2
    72                                              
    73                                              
    74                                              ;check if the number is even or not
    75 00000040 A1[10000000]                        mov eax, dword[numar]
    76                                              compute_parity:
    77 00000045 66BB0200                                mov bx, 2
    78 00000049 BA00000000                              mov edx, 0
    79 0000004E 66F7F3                                  div bx
    80                                                  
    81                                                  ;cmp eax, 0
    82                                                  ;jne compute_parity
    83                                                  
    84 00000051 83FA00                              cmp edx, 0  ;in edx we have the remainder, if it is 0 then we have an even number
    85 00000054 7402                                je add_even
    86 00000056 EB12                                jmp add_odd
    87                                              
    88                                              add_even:
    89 00000058 A1[04000000]                            mov eax, dword[sum_pare]
    90 0000005D 0305[10000000]                          add eax, dword[numar]
    91 00000063 A3[04000000]                            mov dword[sum_pare], eax
    92 00000068 EB12                                    jmp end_loop
    93                                                  
    94                                              add_odd:
    95 0000006A A1[08000000]                            mov eax, dword[sum_imp]
    96 0000006F 0305[10000000]                          add eax, dword[numar]
    97 00000075 A3[08000000]                            mov dword[sum_imp], eax
    98 0000007A EB00                                    jmp end_loop
    99                                                  
   100                                              end_loop:
   101 0000007C 8B0D[67000000]                          mov ecx, dword[cpy]
   102 00000082 E2A3                                    loop while_loop
   103                                                 
   104 00000084 A1[04000000]                    mov eax, dword[sum_pare]
   105 00000089 8B1D[08000000]                  mov ebx, dword[sum_imp]
   106 0000008F 29D8                            sub eax, ebx
   107 00000091 A3[0C000000]                    mov dword[dif_sume], eax
   108                                          
   109                                          ;open the output file
   110 00000096 68[1A000000]                    push dword access_w
   111 0000009B 68[5C000000]                    push dword file
   112 000000A0 FF15[00000000]                  call [fopen]
   113 000000A6 83C408                          add esp, 4 * 2
   114                                          
   115 000000A9 83F800                          cmp eax, 0
   116 000000AC 0F84C6000000                    jz get_out
   117                                          
   118 000000B2 A3[14000000]                    mov dword[file_ptr], eax
   119                                                  
   120 000000B7 68[25000000]                    push dword message1
   121 000000BC FF35[14000000]                  push dword[file_ptr]
   122 000000C2 FF15[00000000]                  call [fprintf]
   123 000000C8 83C408                          add esp, 4 * 2
   124                                          
   125 000000CB FF35[04000000]                  push dword[sum_pare]  
   126 000000D1 68[1F000000]                    push format_w
   127 000000D6 FF35[14000000]                  push dword[file_ptr]
   128 000000DC FF15[00000000]                  call [fprintf]
   129 000000E2 83C40C                          add esp, 4 * 3
   130                                          
   131 000000E5 68[5A000000]                    push dword newline
   132 000000EA FF35[14000000]                  push dword[file_ptr]
   133 000000F0 FF15[00000000]                  call [fprintf]
   134 000000F6 83C408                          add esp, 4 * 2
   135                                          
   136 000000F9 68[3A000000]                    push dword message2
   137 000000FE FF35[14000000]                  push dword[file_ptr]
   138 00000104 FF15[00000000]                  call [fprintf]
   139 0000010A 83C408                          add esp, 4 * 2
   140                                          
   141 0000010D FF35[08000000]                  push dword[sum_imp]
   142 00000113 68[1F000000]                    push format_w
   143 00000118 FF35[14000000]                  push dword[file_ptr]
   144 0000011E FF15[00000000]                  call [fprintf]
   145 00000124 83C40C                          add esp, 4 * 3
   146                                          
   147 00000127 68[5A000000]                    push dword newline
   148 0000012C FF35[14000000]                  push dword[file_ptr]
   149 00000132 FF15[00000000]                  call [fprintf]
   150 00000138 83C408                          add esp, 4 * 2
   151                                          
   152 0000013B 68[4E000000]                    push dword message3
   153 00000140 FF35[14000000]                  push dword[file_ptr]
   154 00000146 FF15[00000000]                  call [fprintf]
   155 0000014C 83C408                          add esp, 4 * 2
   156                                          
   157 0000014F FF35[0C000000]                  push dword[dif_sume]
   158 00000155 68[1F000000]                    push format_w
   159 0000015A FF35[14000000]                  push dword[file_ptr]
   160 00000160 FF15[00000000]                  call [fprintf]
   161 00000166 83C40C                          add esp, 4 * 3
   162                                                  
   163                                          ;make the print
   164                                          ;push dword[dif_sume]
   165                                          ;push dword format_w
   166                                          ;push dword[sum_imp]
   167                                          ;push dword format_w
   168                                          ;push dword[sum_pare]
   169                                          ;push dword format_w
   170                                          ;;push dword message1
   171                                          ;push dword[file_ptr]
   172                                          ;call [fprintf]
   173                                          ;add esp, 4*7
   174                                          
   175                                          ;close the file
   176 00000169 FF35[14000000]                  push dword[file_ptr]
   177 0000016F FF15[00000000]                  call [fclose]
   178 00000175 83C404                          add esp, 4
   179                                          
   180                                          
   181                                          ; exit(0)
   182                                          get_out:
   183 00000178 FF35[6B000000]                      push dword[errors]
   184 0000017E FF15[00000000]                      call [perror]
   185 00000184 83C404                              add esp, 4
   186 00000187 6A00                                push    dword 0      ; push the parameter for exit onto the stack
   187 00000189 FF15[00000000]                      call    [exit]       ; call exit to terminate the program
