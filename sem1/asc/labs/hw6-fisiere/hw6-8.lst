     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fscanf, fprintf, printf, perror               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fscanf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  import perror msvcrt
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20                                      ;A file name and a decimal number (on 16 bits) are given (the decimal number is in the unsigned interpretation). 
    21                                      ;Create a file with the given name and write each digit composing the number on a different line to file.
    22 00000000 00000000                    f dd 0
    23 00000004 00000000                    g dd 0
    24 00000008 696E2E74787400              file1 db "in.txt", 0
    25 0000000F 7200                        access_r db "r", 0
    26 00000011 00000000                    n dd 0
    27 00000015 257500                      format_r db "%u", 0
    28 00000018 6F75742E74787400            file2 db "out.txt", 0
    29 00000020 7700                        access_w db "w", 0
    30 00000022 256300                      format_w db "%c", 0
    31 00000025 <res 00000008>              digits resq 1
    32 0000002D <res 00000004>              cnt resd 1
    33 00000031 <res 00000004>              cnt1 resd 1
    34 00000035 <res 00000008>              digits1 resq 1
    35 0000003D 00                          digit db 0
    36 0000003E 4572726F7220666F75-         errors db "Error found", 0
    36 00000047 6E6400             
    37                                      
    38                                  ; our code starts here
    39                                  segment code use32 class=code
    40                                      start:
    41                                          ; ...
    42 00000000 68[0F000000]                    push dword access_r  ;we open the input file
    43 00000005 68[08000000]                    push dword file1
    44 0000000A FF15[00000000]                  call [fopen]
    45 00000010 83C408                          add esp, 4 * 2
    46 00000013 83F800                          cmp eax, 0  ;in case the file doesn't exist
    47 00000016 0F84F1000000                    jz get_out
    48                                          
    49 0000001C A3[00000000]                    mov dword[f], eax   ;we read the number n from the file
    50 00000021 68[11000000]                    push dword n
    51 00000026 68[15000000]                    push dword format_r
    52 0000002B FF35[00000000]                  push dword[f]
    53 00000031 FF15[00000000]                  call [fscanf]
    54 00000037 83C40C                          add esp, 4 * 3
    55                                          
    56 0000003A FF35[00000000]                  push dword[f]   ;we close the input file
    57 00000040 FF15[00000000]                  call [fclose]
    58 00000046 83C404                          add esp, 4
    59                                          
    60 00000049 A1[11000000]                    mov eax, dword[n]
    61                                          
    62                                          repeat:
    63 0000004E BA00000000                          mov edx, 0
    64                                              ;mov eax, dword[n]
    65 00000053 66BB0A00                            mov bx, 10
    66 00000057 66F7F3                              div bx      ;ax = quotient, dx = remainder
    67                                              
    68 0000005A B900000000                          mov ecx, 0      ;add the remainder (which is the digit of the nr in base 10 in the digits array)
    69 0000005F 8A0D[2D000000]                      mov cl, byte[cnt]
    70 00000065 8891[25000000]                      mov [digits + ecx], dl
    71 0000006B FE05[2D000000]                      inc byte[cnt]
    72                                              
    73 00000071 6683F800                            cmp ax, 0    ;while n > 0 
    74 00000075 75D7                                jnz repeat 
    75                                          
    76                                          
    77 00000077 68[20000000]                    push dword access_w  ;we open the output file
    78 0000007C 68[18000000]                    push dword file2
    79 00000081 FF15[00000000]                  call [fopen]
    80 00000087 83C408                          add esp, 4 * 2
    81 0000008A 83F800                          cmp eax, 0
    82 0000008D 747E                            jz get_out
    83                                          
    84 0000008F A3[04000000]                    mov dword[g], eax
    85                                          
    86                                          write_digits:
    87 00000094 FE0D[2D000000]                      dec byte[cnt]
    88 0000009A BA00000000                          mov edx, 0
    89 0000009F 8A15[2D000000]                      mov dl, byte [cnt] ;get digit
    90 000000A5 B900000000                          mov ecx, 0
    91 000000AA 8A8A[25000000]                      mov cl, byte[digits + edx]
    92 000000B0 80C130                              add cl, '0'           ; convert to ascii
    93 000000B3 880D[3D000000]                      mov byte [digit], cl  ; store in digit buffer
    94                                  
    95                                              ; write digit 
    96 000000B9 FF35[3D000000]                      push dword[digit]
    97 000000BF 68[22000000]                        push dword format_w
    98 000000C4 FF35[04000000]                      push dword[g]
    99 000000CA FF15[00000000]                      call [fprintf]
   100 000000D0 83C40C                              add esp, 4 * 3
   101                                  
   102                                              ; write newline character
   103 000000D3 C605[3D000000]0A                    mov byte [digit], 10  ; ascii newline ('\n')
   104 000000DA FF35[3D000000]                      push dword [digit]
   105 000000E0 68[22000000]                        push dword format_w
   106 000000E5 FF35[04000000]                      push dword [g]
   107 000000EB FF15[00000000]                      call [fprintf]
   108 000000F1 83C40C                              add esp, 4 * 3
   109                                  
   110 000000F4 A1[2D000000]                        mov eax, dword[cnt]
   111 000000F9 83F800                              cmp eax, 0
   112 000000FC 7596                                jnz write_digits
   113                                                  
   114                                          
   115 000000FE FF35[04000000]                  push dword[g]   ;we close the output file
   116 00000104 FF15[00000000]                  call [fclose]
   117 0000010A 83C404                          add esp, 4
   118                                      
   119                                      
   120                                          ; exit(0)
   121                                          get_out:
   122 0000010D 68[3E000000]                        push dword errors ;it will show us if we have any errors
   123 00000112 FF15[00000000]                      call [perror]
   124 00000118 83C404                              add esp, 4
   125 0000011B 6A00                                push    dword 0      ; push the parameter for exit onto the stack
   126 0000011D FF15[00000000]                      call    [exit]       ; call exit to terminate the program
